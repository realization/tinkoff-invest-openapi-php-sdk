<?php
/**
 * Operation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI
 *
 * tinkoff.ru/invest OpenAPI.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.21
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Operation Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Operation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Operation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'status' => '\Swagger\Client\Model\OperationStatus',
'trades' => '\Swagger\Client\Model\OperationTrade[]',
'commission' => '\Swagger\Client\Model\MoneyAmount',
'currency' => '\Swagger\Client\Model\Currency',
'payment' => 'double',
'price' => 'double',
'quantity' => 'int',
'quantity_executed' => 'int',
'figi' => 'string',
'instrument_type' => '\Swagger\Client\Model\InstrumentType',
'is_margin_call' => 'bool',
'date' => '\DateTime',
'operation_type' => '\Swagger\Client\Model\OperationTypeWithCommission'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'status' => null,
'trades' => null,
'commission' => null,
'currency' => null,
'payment' => 'double',
'price' => 'double',
'quantity' => 'int32',
'quantity_executed' => 'int32',
'figi' => null,
'instrument_type' => null,
'is_margin_call' => null,
'date' => 'date-time',
'operation_type' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'status' => 'status',
'trades' => 'trades',
'commission' => 'commission',
'currency' => 'currency',
'payment' => 'payment',
'price' => 'price',
'quantity' => 'quantity',
'quantity_executed' => 'quantityExecuted',
'figi' => 'figi',
'instrument_type' => 'instrumentType',
'is_margin_call' => 'isMarginCall',
'date' => 'date',
'operation_type' => 'operationType'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'status' => 'setStatus',
'trades' => 'setTrades',
'commission' => 'setCommission',
'currency' => 'setCurrency',
'payment' => 'setPayment',
'price' => 'setPrice',
'quantity' => 'setQuantity',
'quantity_executed' => 'setQuantityExecuted',
'figi' => 'setFigi',
'instrument_type' => 'setInstrumentType',
'is_margin_call' => 'setIsMarginCall',
'date' => 'setDate',
'operation_type' => 'setOperationType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'status' => 'getStatus',
'trades' => 'getTrades',
'commission' => 'getCommission',
'currency' => 'getCurrency',
'payment' => 'getPayment',
'price' => 'getPrice',
'quantity' => 'getQuantity',
'quantity_executed' => 'getQuantityExecuted',
'figi' => 'getFigi',
'instrument_type' => 'getInstrumentType',
'is_margin_call' => 'getIsMarginCall',
'date' => 'getDate',
'operation_type' => 'getOperationType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['trades'] = isset($data['trades']) ? $data['trades'] : null;
        $this->container['commission'] = isset($data['commission']) ? $data['commission'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['payment'] = isset($data['payment']) ? $data['payment'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['quantity_executed'] = isset($data['quantity_executed']) ? $data['quantity_executed'] : null;
        $this->container['figi'] = isset($data['figi']) ? $data['figi'] : null;
        $this->container['instrument_type'] = isset($data['instrument_type']) ? $data['instrument_type'] : null;
        $this->container['is_margin_call'] = isset($data['is_margin_call']) ? $data['is_margin_call'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['operation_type'] = isset($data['operation_type']) ? $data['operation_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['payment'] === null) {
            $invalidProperties[] = "'payment' can't be null";
        }
        if ($this->container['is_margin_call'] === null) {
            $invalidProperties[] = "'is_margin_call' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Swagger\Client\Model\OperationStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Swagger\Client\Model\OperationStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets trades
     *
     * @return \Swagger\Client\Model\OperationTrade[]
     */
    public function getTrades()
    {
        return $this->container['trades'];
    }

    /**
     * Sets trades
     *
     * @param \Swagger\Client\Model\OperationTrade[] $trades trades
     *
     * @return $this
     */
    public function setTrades($trades)
    {
        $this->container['trades'] = $trades;

        return $this;
    }

    /**
     * Gets commission
     *
     * @return \Swagger\Client\Model\MoneyAmount
     */
    public function getCommission()
    {
        return $this->container['commission'];
    }

    /**
     * Sets commission
     *
     * @param \Swagger\Client\Model\MoneyAmount $commission commission
     *
     * @return $this
     */
    public function setCommission($commission)
    {
        $this->container['commission'] = $commission;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \Swagger\Client\Model\Currency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Swagger\Client\Model\Currency $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets payment
     *
     * @return double
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     *
     * @param double $payment payment
     *
     * @return $this
     */
    public function setPayment($payment)
    {
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets price
     *
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param double $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity Число инструментов в выставленной заявке
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets quantity_executed
     *
     * @return int
     */
    public function getQuantityExecuted()
    {
        return $this->container['quantity_executed'];
    }

    /**
     * Sets quantity_executed
     *
     * @param int $quantity_executed Число инструментов, исполненных в заявке
     *
     * @return $this
     */
    public function setQuantityExecuted($quantity_executed)
    {
        $this->container['quantity_executed'] = $quantity_executed;

        return $this;
    }

    /**
     * Gets figi
     *
     * @return string
     */
    public function getFigi()
    {
        return $this->container['figi'];
    }

    /**
     * Sets figi
     *
     * @param string $figi figi
     *
     * @return $this
     */
    public function setFigi($figi)
    {
        $this->container['figi'] = $figi;

        return $this;
    }

    /**
     * Gets instrument_type
     *
     * @return \Swagger\Client\Model\InstrumentType
     */
    public function getInstrumentType()
    {
        return $this->container['instrument_type'];
    }

    /**
     * Sets instrument_type
     *
     * @param \Swagger\Client\Model\InstrumentType $instrument_type instrument_type
     *
     * @return $this
     */
    public function setInstrumentType($instrument_type)
    {
        $this->container['instrument_type'] = $instrument_type;

        return $this;
    }

    /**
     * Gets is_margin_call
     *
     * @return bool
     */
    public function getIsMarginCall()
    {
        return $this->container['is_margin_call'];
    }

    /**
     * Sets is_margin_call
     *
     * @param bool $is_margin_call is_margin_call
     *
     * @return $this
     */
    public function setIsMarginCall($is_margin_call)
    {
        $this->container['is_margin_call'] = $is_margin_call;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date ISO8601
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets operation_type
     *
     * @return \Swagger\Client\Model\OperationTypeWithCommission
     */
    public function getOperationType()
    {
        return $this->container['operation_type'];
    }

    /**
     * Sets operation_type
     *
     * @param \Swagger\Client\Model\OperationTypeWithCommission $operation_type operation_type
     *
     * @return $this
     */
    public function setOperationType($operation_type)
    {
        $this->container['operation_type'] = $operation_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
