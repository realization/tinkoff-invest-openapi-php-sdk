<?php
/**
 * Orderbook
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI
 *
 * tinkoff.ru/invest OpenAPI.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.21
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Orderbook Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Orderbook implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Orderbook';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'figi' => 'string',
'depth' => 'int',
'bids' => '\Swagger\Client\Model\OrderResponse[]',
'asks' => '\Swagger\Client\Model\OrderResponse[]',
'trade_status' => '\Swagger\Client\Model\TradeStatus',
'min_price_increment' => 'double',
'face_value' => 'double',
'last_price' => 'double',
'close_price' => 'double',
'limit_up' => 'double',
'limit_down' => 'double'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'figi' => null,
'depth' => 'int32',
'bids' => null,
'asks' => null,
'trade_status' => null,
'min_price_increment' => 'double',
'face_value' => 'double',
'last_price' => 'double',
'close_price' => 'double',
'limit_up' => 'double',
'limit_down' => 'double'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'figi' => 'figi',
'depth' => 'depth',
'bids' => 'bids',
'asks' => 'asks',
'trade_status' => 'tradeStatus',
'min_price_increment' => 'minPriceIncrement',
'face_value' => 'faceValue',
'last_price' => 'lastPrice',
'close_price' => 'closePrice',
'limit_up' => 'limitUp',
'limit_down' => 'limitDown'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'figi' => 'setFigi',
'depth' => 'setDepth',
'bids' => 'setBids',
'asks' => 'setAsks',
'trade_status' => 'setTradeStatus',
'min_price_increment' => 'setMinPriceIncrement',
'face_value' => 'setFaceValue',
'last_price' => 'setLastPrice',
'close_price' => 'setClosePrice',
'limit_up' => 'setLimitUp',
'limit_down' => 'setLimitDown'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'figi' => 'getFigi',
'depth' => 'getDepth',
'bids' => 'getBids',
'asks' => 'getAsks',
'trade_status' => 'getTradeStatus',
'min_price_increment' => 'getMinPriceIncrement',
'face_value' => 'getFaceValue',
'last_price' => 'getLastPrice',
'close_price' => 'getClosePrice',
'limit_up' => 'getLimitUp',
'limit_down' => 'getLimitDown'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['figi'] = isset($data['figi']) ? $data['figi'] : null;
        $this->container['depth'] = isset($data['depth']) ? $data['depth'] : null;
        $this->container['bids'] = isset($data['bids']) ? $data['bids'] : null;
        $this->container['asks'] = isset($data['asks']) ? $data['asks'] : null;
        $this->container['trade_status'] = isset($data['trade_status']) ? $data['trade_status'] : null;
        $this->container['min_price_increment'] = isset($data['min_price_increment']) ? $data['min_price_increment'] : null;
        $this->container['face_value'] = isset($data['face_value']) ? $data['face_value'] : null;
        $this->container['last_price'] = isset($data['last_price']) ? $data['last_price'] : null;
        $this->container['close_price'] = isset($data['close_price']) ? $data['close_price'] : null;
        $this->container['limit_up'] = isset($data['limit_up']) ? $data['limit_up'] : null;
        $this->container['limit_down'] = isset($data['limit_down']) ? $data['limit_down'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['figi'] === null) {
            $invalidProperties[] = "'figi' can't be null";
        }
        if ($this->container['depth'] === null) {
            $invalidProperties[] = "'depth' can't be null";
        }
        if ($this->container['bids'] === null) {
            $invalidProperties[] = "'bids' can't be null";
        }
        if ($this->container['asks'] === null) {
            $invalidProperties[] = "'asks' can't be null";
        }
        if ($this->container['trade_status'] === null) {
            $invalidProperties[] = "'trade_status' can't be null";
        }
        if ($this->container['min_price_increment'] === null) {
            $invalidProperties[] = "'min_price_increment' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets figi
     *
     * @return string
     */
    public function getFigi()
    {
        return $this->container['figi'];
    }

    /**
     * Sets figi
     *
     * @param string $figi figi
     *
     * @return $this
     */
    public function setFigi($figi)
    {
        $this->container['figi'] = $figi;

        return $this;
    }

    /**
     * Gets depth
     *
     * @return int
     */
    public function getDepth()
    {
        return $this->container['depth'];
    }

    /**
     * Sets depth
     *
     * @param int $depth depth
     *
     * @return $this
     */
    public function setDepth($depth)
    {
        $this->container['depth'] = $depth;

        return $this;
    }

    /**
     * Gets bids
     *
     * @return \Swagger\Client\Model\OrderResponse[]
     */
    public function getBids()
    {
        return $this->container['bids'];
    }

    /**
     * Sets bids
     *
     * @param \Swagger\Client\Model\OrderResponse[] $bids bids
     *
     * @return $this
     */
    public function setBids($bids)
    {
        $this->container['bids'] = $bids;

        return $this;
    }

    /**
     * Gets asks
     *
     * @return \Swagger\Client\Model\OrderResponse[]
     */
    public function getAsks()
    {
        return $this->container['asks'];
    }

    /**
     * Sets asks
     *
     * @param \Swagger\Client\Model\OrderResponse[] $asks asks
     *
     * @return $this
     */
    public function setAsks($asks)
    {
        $this->container['asks'] = $asks;

        return $this;
    }

    /**
     * Gets trade_status
     *
     * @return \Swagger\Client\Model\TradeStatus
     */
    public function getTradeStatus()
    {
        return $this->container['trade_status'];
    }

    /**
     * Sets trade_status
     *
     * @param \Swagger\Client\Model\TradeStatus $trade_status trade_status
     *
     * @return $this
     */
    public function setTradeStatus($trade_status)
    {
        $this->container['trade_status'] = $trade_status;

        return $this;
    }

    /**
     * Gets min_price_increment
     *
     * @return double
     */
    public function getMinPriceIncrement()
    {
        return $this->container['min_price_increment'];
    }

    /**
     * Sets min_price_increment
     *
     * @param double $min_price_increment Шаг цены
     *
     * @return $this
     */
    public function setMinPriceIncrement($min_price_increment)
    {
        $this->container['min_price_increment'] = $min_price_increment;

        return $this;
    }

    /**
     * Gets face_value
     *
     * @return double
     */
    public function getFaceValue()
    {
        return $this->container['face_value'];
    }

    /**
     * Sets face_value
     *
     * @param double $face_value Номинал для облигаций
     *
     * @return $this
     */
    public function setFaceValue($face_value)
    {
        $this->container['face_value'] = $face_value;

        return $this;
    }

    /**
     * Gets last_price
     *
     * @return double
     */
    public function getLastPrice()
    {
        return $this->container['last_price'];
    }

    /**
     * Sets last_price
     *
     * @param double $last_price last_price
     *
     * @return $this
     */
    public function setLastPrice($last_price)
    {
        $this->container['last_price'] = $last_price;

        return $this;
    }

    /**
     * Gets close_price
     *
     * @return double
     */
    public function getClosePrice()
    {
        return $this->container['close_price'];
    }

    /**
     * Sets close_price
     *
     * @param double $close_price close_price
     *
     * @return $this
     */
    public function setClosePrice($close_price)
    {
        $this->container['close_price'] = $close_price;

        return $this;
    }

    /**
     * Gets limit_up
     *
     * @return double
     */
    public function getLimitUp()
    {
        return $this->container['limit_up'];
    }

    /**
     * Sets limit_up
     *
     * @param double $limit_up Верхняя граница цены
     *
     * @return $this
     */
    public function setLimitUp($limit_up)
    {
        $this->container['limit_up'] = $limit_up;

        return $this;
    }

    /**
     * Gets limit_down
     *
     * @return double
     */
    public function getLimitDown()
    {
        return $this->container['limit_down'];
    }

    /**
     * Sets limit_down
     *
     * @param double $limit_down Нижняя граница цены
     *
     * @return $this
     */
    public function setLimitDown($limit_down)
    {
        $this->container['limit_down'] = $limit_down;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
