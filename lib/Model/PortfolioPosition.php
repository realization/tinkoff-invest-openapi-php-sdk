<?php
/**
 * PortfolioPosition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * OpenAPI
 *
 * tinkoff.ru/invest OpenAPI.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: n.v.melnikov@tinkoff.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.21
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PortfolioPosition Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PortfolioPosition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PortfolioPosition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'figi' => 'string',
'ticker' => 'string',
'isin' => 'string',
'instrument_type' => '\Swagger\Client\Model\InstrumentType',
'balance' => 'double',
'blocked' => 'double',
'expected_yield' => '\Swagger\Client\Model\MoneyAmount',
'lots' => 'int',
'average_position_price' => '\Swagger\Client\Model\MoneyAmount',
'average_position_price_no_nkd' => '\Swagger\Client\Model\MoneyAmount',
'name' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'figi' => null,
'ticker' => null,
'isin' => null,
'instrument_type' => null,
'balance' => 'double',
'blocked' => 'double',
'expected_yield' => null,
'lots' => 'int32',
'average_position_price' => null,
'average_position_price_no_nkd' => null,
'name' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'figi' => 'figi',
'ticker' => 'ticker',
'isin' => 'isin',
'instrument_type' => 'instrumentType',
'balance' => 'balance',
'blocked' => 'blocked',
'expected_yield' => 'expectedYield',
'lots' => 'lots',
'average_position_price' => 'averagePositionPrice',
'average_position_price_no_nkd' => 'averagePositionPriceNoNkd',
'name' => 'name'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'figi' => 'setFigi',
'ticker' => 'setTicker',
'isin' => 'setIsin',
'instrument_type' => 'setInstrumentType',
'balance' => 'setBalance',
'blocked' => 'setBlocked',
'expected_yield' => 'setExpectedYield',
'lots' => 'setLots',
'average_position_price' => 'setAveragePositionPrice',
'average_position_price_no_nkd' => 'setAveragePositionPriceNoNkd',
'name' => 'setName'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'figi' => 'getFigi',
'ticker' => 'getTicker',
'isin' => 'getIsin',
'instrument_type' => 'getInstrumentType',
'balance' => 'getBalance',
'blocked' => 'getBlocked',
'expected_yield' => 'getExpectedYield',
'lots' => 'getLots',
'average_position_price' => 'getAveragePositionPrice',
'average_position_price_no_nkd' => 'getAveragePositionPriceNoNkd',
'name' => 'getName'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['figi'] = isset($data['figi']) ? $data['figi'] : null;
        $this->container['ticker'] = isset($data['ticker']) ? $data['ticker'] : null;
        $this->container['isin'] = isset($data['isin']) ? $data['isin'] : null;
        $this->container['instrument_type'] = isset($data['instrument_type']) ? $data['instrument_type'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['blocked'] = isset($data['blocked']) ? $data['blocked'] : null;
        $this->container['expected_yield'] = isset($data['expected_yield']) ? $data['expected_yield'] : null;
        $this->container['lots'] = isset($data['lots']) ? $data['lots'] : null;
        $this->container['average_position_price'] = isset($data['average_position_price']) ? $data['average_position_price'] : null;
        $this->container['average_position_price_no_nkd'] = isset($data['average_position_price_no_nkd']) ? $data['average_position_price_no_nkd'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['figi'] === null) {
            $invalidProperties[] = "'figi' can't be null";
        }
        if ($this->container['instrument_type'] === null) {
            $invalidProperties[] = "'instrument_type' can't be null";
        }
        if ($this->container['balance'] === null) {
            $invalidProperties[] = "'balance' can't be null";
        }
        if ($this->container['lots'] === null) {
            $invalidProperties[] = "'lots' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets figi
     *
     * @return string
     */
    public function getFigi()
    {
        return $this->container['figi'];
    }

    /**
     * Sets figi
     *
     * @param string $figi figi
     *
     * @return $this
     */
    public function setFigi($figi)
    {
        $this->container['figi'] = $figi;

        return $this;
    }

    /**
     * Gets ticker
     *
     * @return string
     */
    public function getTicker()
    {
        return $this->container['ticker'];
    }

    /**
     * Sets ticker
     *
     * @param string $ticker ticker
     *
     * @return $this
     */
    public function setTicker($ticker)
    {
        $this->container['ticker'] = $ticker;

        return $this;
    }

    /**
     * Gets isin
     *
     * @return string
     */
    public function getIsin()
    {
        return $this->container['isin'];
    }

    /**
     * Sets isin
     *
     * @param string $isin isin
     *
     * @return $this
     */
    public function setIsin($isin)
    {
        $this->container['isin'] = $isin;

        return $this;
    }

    /**
     * Gets instrument_type
     *
     * @return \Swagger\Client\Model\InstrumentType
     */
    public function getInstrumentType()
    {
        return $this->container['instrument_type'];
    }

    /**
     * Sets instrument_type
     *
     * @param \Swagger\Client\Model\InstrumentType $instrument_type instrument_type
     *
     * @return $this
     */
    public function setInstrumentType($instrument_type)
    {
        $this->container['instrument_type'] = $instrument_type;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return double
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param double $balance balance
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets blocked
     *
     * @return double
     */
    public function getBlocked()
    {
        return $this->container['blocked'];
    }

    /**
     * Sets blocked
     *
     * @param double $blocked blocked
     *
     * @return $this
     */
    public function setBlocked($blocked)
    {
        $this->container['blocked'] = $blocked;

        return $this;
    }

    /**
     * Gets expected_yield
     *
     * @return \Swagger\Client\Model\MoneyAmount
     */
    public function getExpectedYield()
    {
        return $this->container['expected_yield'];
    }

    /**
     * Sets expected_yield
     *
     * @param \Swagger\Client\Model\MoneyAmount $expected_yield expected_yield
     *
     * @return $this
     */
    public function setExpectedYield($expected_yield)
    {
        $this->container['expected_yield'] = $expected_yield;

        return $this;
    }

    /**
     * Gets lots
     *
     * @return int
     */
    public function getLots()
    {
        return $this->container['lots'];
    }

    /**
     * Sets lots
     *
     * @param int $lots lots
     *
     * @return $this
     */
    public function setLots($lots)
    {
        $this->container['lots'] = $lots;

        return $this;
    }

    /**
     * Gets average_position_price
     *
     * @return \Swagger\Client\Model\MoneyAmount
     */
    public function getAveragePositionPrice()
    {
        return $this->container['average_position_price'];
    }

    /**
     * Sets average_position_price
     *
     * @param \Swagger\Client\Model\MoneyAmount $average_position_price average_position_price
     *
     * @return $this
     */
    public function setAveragePositionPrice($average_position_price)
    {
        $this->container['average_position_price'] = $average_position_price;

        return $this;
    }

    /**
     * Gets average_position_price_no_nkd
     *
     * @return \Swagger\Client\Model\MoneyAmount
     */
    public function getAveragePositionPriceNoNkd()
    {
        return $this->container['average_position_price_no_nkd'];
    }

    /**
     * Sets average_position_price_no_nkd
     *
     * @param \Swagger\Client\Model\MoneyAmount $average_position_price_no_nkd average_position_price_no_nkd
     *
     * @return $this
     */
    public function setAveragePositionPriceNoNkd($average_position_price_no_nkd)
    {
        $this->container['average_position_price_no_nkd'] = $average_position_price_no_nkd;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
